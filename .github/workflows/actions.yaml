# SPDX-FileCopyrightText: 2023 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

name: CI/CD Pipeline

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-north-1

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # Clone the repo
      - name: Clone repository
        uses: actions/checkout@v3
      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-npm-
      # Install dependencies
      - name: Install dependencies
        run: npm install
      # Run tests
      - name: Run tests
        run: npm test
        id: tests
      # Build the static site
      - name: Create static build
        run: npm run build
      # Upload the artifact for other stages to use
      - name: Share artifact in GitHub workflow
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build_and_test
#    if: github.event_name == 'push'
#    steps:
#      # Download the build artifact
#      - name: Get build artifact
#        uses: actions/download-artifact@v1
#        with:
#          name: build
#      # Setup the AWS credentials
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#      # Copy the files from /build to s3 bucket
#      - name: Deploy static site to S3 bucket
#        run: aws s3 sync . s3://user-feedback-app-bucket --delete
#        working-directory: build
#      # Invalidate index file in Cloudfront (this forces edges to fetch the latest index.html)
#      - name: invalidate
#        uses: chetan/invalidate-cloudfront-action@master
#        env:
#          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
#          PATHS: "/index.html"
#          AWS_REGION: ${{ env.AWS_REGION }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
